@page "/"
@using Application.UseCases.Weather.Handlers
@using MediatR
@using System.Security.Claims

@implements IDisposable
@inject IMediator Mediator


<div id="main" class="@GetBackgroundClass()">
    <div class="weather-now">
        <h1 class="page-title">Brady Blazor Weather</h1>

        <LocationSearch LocationChanged="LocationChanged" />

        @if (currentWeather == null)
        {
            <p><em>Search for a city.</em></p>
        }
        else
        {
            //Main display
            <div class="location">
                <h1>@currentLocation.LocalizedName.ToUpper()</h1>
            </div>
            <div class="temperature">
                @currentWeather.Temperature
            </div>
            <div class="summary">
                <img class="weather-img" src="@currentWeather.WeatherUri" alt="@currentWeather.WeatherText" />
                @currentWeather.WeatherText
            </div>
            <div>Updated @GetTimeToDisplay().ToUpper()</div>
            <div class="metrics">
                <div>UV index <p>@currentWeather.UVIndex</p></div>
                <div>Barometer <p>@currentWeather.Pressure</p></div>
                <div>Humidity <p>@currentWeather.RelativeHumidity%</p></div>
                <div>Wind <p>@currentWeather.WindSpeed <span class="wind-details">mph @currentWeather.WindDirection</span></p></div>
            </div>
        }
    </div>
</div>

@code {
    WeatherResponse currentWeather;
    Location currentLocation;
    CancellationTokenSource streamingWeatherCTS = new CancellationTokenSource();


    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; }

    //protected override async Task OnInitializedAsync()
    //{
    //    //ClaimsPrincipal user = (await AuthState).User;

    //    //if (user.Identity.IsAuthenticated)
    //    //{
    //    //    Console.WriteLine($"{user.Identity.Name} is authenticated.");
    //    //}
    //}

    private async Task GetWeatherUpdates()
    {
        if (!streamingWeatherCTS.IsCancellationRequested)
        {
            var weatherResponse = await Mediator.Send(new GetWeatherForecastRequest
            {
                LocationKey = currentLocation.Key
            }, streamingWeatherCTS.Token);

            currentWeather = weatherResponse;
            StateHasChanged();
        }

    }

    //Delegate event trigger
    private void LocationChanged(Location newLocation)
    {
        currentLocation = newLocation;
        streamingWeatherCTS.Cancel();
        streamingWeatherCTS.Dispose();
        streamingWeatherCTS = new CancellationTokenSource();
        _ = GetWeatherUpdates();
    }


    //Helper methods
    private string GetBackgroundClass()
    {
        if (currentWeather == null)
        {
            //Just set a default
            return "warm";
        }
        if (!currentWeather.IsDayTime)
        {
            return "night";
        }
        return currentWeather.Temperature > 60 ? "warm" : "cold";
    }

    string GetTimeToDisplay()
    {
        return currentWeather.RetrievedTime.ToLocalTime().ToString("T");
    }


    void IDisposable.Dispose()
    {
        streamingWeatherCTS.Cancel();
    }
}
